System syscoapdemo

Dispatch cmd      : cmd(X)

Context ctxcoapdemo ip [ host= "localhost" port= 8022 ]

QActor actor0 context ctxcoapdemo{ 
	State s0 initial{ 
 		 run itunibo.robot.coap.coapserverforctx.start()   //should be done by the context
 		 run itunibo.robot.coap.coapserverforctx.add( myself )
// 		 [" //INJECT THE ROBOT SUPPORT into the resource
//			itunibo.robotMbot.mbotSupport.create( myself  )		 
//			itunibo.robotMbot.mbotSupport.init(  \"COM20\" )		// /dev/ttyUSB0 
//			var R = itunibo.robot.coap.coapserverforctx.getResource( myself.name )
//			if( R != null ) R.setRobotSupport( itunibo.robotMbot.mbotSupport )
//		  "]
 		 [" //INJECT THE ROBOT SUPPORT into the resource
			itunibo.robotVirtual.virtualRobotSupport.create( myself  )		 
			var R = itunibo.robot.coap.coapserverforctx.getResource( myself.name )
			if( R != null ) R.setRobotSupport( itunibo.robotVirtual.virtualRobotSupport )
			itunibo.robotVirtual.virtualRobotSupport.init( \"8999\"  )		 
		  "]
		//forward qadummy -m cmd : cmd(r)
	}
}
/*
 * Each resource implements the resourceactorinterface (???)
 * Each actor-resource is added as a son to the context-resource
 * An actor resource could have its own properties and references:
 * 	     it could be difficult to define a standard interface
 * For example, the resource related to a robot-actor must own an obj of type robotsupport.
 * The init operation of the robotsupport MUST TERMINATE => a sensor reader must have its thread
 * 
 * 
 * 
 */