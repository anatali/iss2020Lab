System syscoapdemo

Dispatch cmd      : cmd(X)
Event    info     : info(X)

Context ctxcoapdemo ip [ host= "192.168.1.6"   port= 8022 ]
//Context ctxother    ip [ host= "192.168.1.6" port= 8033 ]  

QActor actor0 context ctxcoapdemo{ 
	State s0 initial{ 
 		 //run itunibo.robot.coap.robotSupport.createVirtualRobotSupport( myself )
	} 
	Goto work
	
	State work{
		println("			actor0 waiting ...") 		
	}
	Transition t0 whenMsg cmd -> handleCmd

	State handleCmd{ 
		printCurrentMessage
		onMsg ( cmd : cmd(MOVE) ) { 
			run itunibo.robot.coap.robotSupport.move( payloadArg(0) )
			emit info : info( $payloadArg(0) )
			//["updateCoapResource( \"${payloadArg(0)} done\" )"]
		} 
	}
	Goto work
	
}



QActor actor1 context ctxcoapdemo{ 
	State s0 initial{ 
	}
	Goto work
	
	State work{
		println("			actor1 waiting as an observer ...") 		
	}
	Transition t0 whenEvent info -> showInfo
	
	State showInfo{ 
		printCurrentMessage
		//["updateCoapResource( currentMsg.toString() )"]
 	}
	Goto work
}

/*
 * Each resource implements the resourceactorinterface (???)
 * Each actor-resource is added as a son to the context-resource
 * An actor resource could have its own properties and references:
 * 	     it could be difficult to define a standard interface
 * For example, the resource related to a robot-actor must own an obj of type robotsupport.
 * The init operation of the robotsupport MUST TERMINATE => a sensor reader must have its thread
 * 
 * 
 * 
 */