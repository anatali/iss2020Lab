/*
 * ================================================================
 * This file includes A TEXTUAL REPRESENTATION of A MODEL 
 * of the required software system expressed using 
 * the language (metamodel) qak as the result of PROJECT PHASE.
 * 
 * It has been updated in order to show the possibility to remove
 * obstacles in a virtual env (project it.unibo.virtualRobot2020)
 * ================================================================
 */ 
System smartrobot  

mqttBroker "localhost" : 1883  
 
Dispatch cmd       :  cmd(X)
Request  onestep   :  onestep(DURATION)	//internal
Reply    stepdone  :  stepdone(V)  
Reply    stepfail  :  stepfail(DURATION, CAUSE)
Dispatch stop      :  stop(V)   	   //sent by external user to block onestep

Event    boundary  : boundary(V)

Event  obstacle    : obstacle( DISTANCE )     
Event  alarm       : alarm(V)             
Event  polar       : polar( D,Angle)			//generated by basicrobot

Event virtualobstacle  : virtualobstacle( OBJNAME )  //added DEC19 for remove

Context ctxSmartRobot ip [ host= "localhost"   port= 8020 ] +mqtt  
Context ctxBasicRobot ip [ host= "127.0.0.1"   port= 8018 ] +mqtt      

ExternalQActor basicrobot context ctxBasicRobot   
    
/*  
 * ---------------------------------------------------------------------------
 * smartrobot
 * ACTIVATES A CoAP resource
 * ACCEPTS COMMANDS from a console  (see SmartRobotUsage.ipynb or consolegui.consoleGui)
 * ACCEPTS COMMANDS from Copper 
 * UPDATES the resource robot/pos at each onestep and rotation
 * 
 * THE step command (p) could last an unpredicateble time, 
 * since obstacles take som time to be removed
 * ---------------------------------------------------------------------------
 */ 
 
QActor smartrobot context ctxSmartRobot{
[" 
var foundObstacle = false
var StepTime      = 0L
var Duration      = 0 

var TimeToEndStep = 0L  
var IsBottle      = false
"]  	
	State s0 initial{ 
 		println("smartrobot starts")
   		run consolegui.consoleGuiCoap.create()	//AFTER Resource creation
 		forward basicrobot -m cmd : cmd( l ) 
		delay 1000
		forward basicrobot -m cmd : cmd( h )
		forward basicrobot -m cmd : cmd( r )
		delay 1000
		forward basicrobot -m cmd : cmd( h )
		//
		println("smartrobot started")
		
	}
 	Goto work 
	
	State work{	} 
	Transition s0 
 			whenMsg cmd         -> handleCmd
 			whenRequest onestep -> doStep
 			whenMsg stop        -> handleStopNotExpected		 
   			whenEvent polar     -> updateDistanceResource
  			
  	State updateDistanceResource{
  		//printCurrentMessage
		onMsg( polar : polar(D,A)){			
//			run kotlincode.coapSupport.updateResource(
//					myself, "robot/sonar", "distance(${payloadArg(0)})")
		}   
	}
  	Goto work
  	
 	State handleStopNotExpected{
 		println("smartrobot | WARNING: stop command should not be sent here")
 	}
 	Goto work
 	
  
 /* 
  * REQUIREMENT req-cmd: redirection
  */
	State handleCmd {
		printCurrentMessage 
		onMsg( cmd : cmd(X) ){ 
			["var Move = payloadArg(0)"]
			forward basicrobot -m cmd : cmd( $Move )
			//run kotlincode.coapSupport.updateResource(myself, "robot/pos", "u$Move")
		}
	} 
	Goto work 

 /*
  * ---------------------------------------------------------------------------
  * REQUIREMENT req-onestep 
  * ---------------------------------------------------------------------------
  */ 
  
	State doStep{ 
 		//printCurrentMessage  
		onMsg( onestep : onestep( T ) ){
			["StepTime = payloadArg(0).toLong() 
 			  startTimer()"]	//REQUIREMENT req-onestep-time
			//println("smartrobot | doStep StepTime =$StepTime ")
			forward basicrobot -m cmd : cmd( w )  //ATTEMPT TO MOVE ...
		}  
	}  
	Transition t0 
		whenTimeVar StepTime  -> stepDone	
		whenMsg stop          -> stepStop		  
 	    whenEvent virtualobstacle -> stepFailVirtual 
		whenEvent obstacle    -> stepFail
 	  
	State stepDone{  //REQUIREMENT  req-onestep-info
		forward basicrobot -m cmd : cmd( h ) 
		//run kotlincode.coapSupport.updateResource(myself, "robot/pos", "up")
 		replyTo onestep with stepdone : stepdone(ok)
  	}
	Goto work
	 
	State stepStop{ //REQUIREMENT req-stop, req-onestep-time, req-onestep-info
		["Duration=getDuration()"]  
		//getDuration: built-in (with ref. to startTimer)
		forward basicrobot -m cmd : cmd( h ) 
		replyTo onestep with stepfail : stepfail($Duration, stopped)
		//println("smartrobot | stepStop Duration=$Duration ")
 	}
	Goto work  	 

	State stepFail{ //REQUIREMENT req-onestep-time, req-onestep-info
		["Duration=getDuration()"]  
		//getDuration(): built-in (with ref. to startTimer)
		replyTo onestep with stepfail : stepfail($Duration, obstacle)
		//println("smartrobot | stepFail Duration=$Duration ")
   	}
	Goto work 

	State stepFailVirtual{ //REQUIREMENT req-onestep-time, req-onestep-info
		onMsg( virtualobstacle : virtualobstacle( OBJNAME )) {
			[" Duration=getDuration()  
			  IsBottle = payloadArg(0).startsWith(\"bottle\")
			  TimeToEndStep = StepTime - Duration   //100L is the backtime of basicrobot
			"] //getDuration(): built-in (with ref. to startTimer)  			
      println("smartrobot | !!!stepFailVirtual dt=$Duration, $TimeToEndStep, obj=${payloadArg(0)}") 
 			if "IsBottle" {  //remove the bottle
 				forward basicrobot -m cmd : cmd( $payloadArg(0) )
 				delay 100  //give time to remove  the object payloadArg(1) TODO: request?
 				//forward smartrobot -m step : step(TimeToStep)  //AUTOMSG
  				forward basicrobot -m cmd : cmd(w)
 				delayVar TimeToEndStep  //give time to remove  the object payloadArg(1)  
 				forward basicrobot -m cmd : cmd(h)
 				replyTo onestep with stepdone : stepdone(ok)
    		} else{
 				replyTo onestep with stepfail : stepfail($Duration, $payloadArg(0))  			
 			} 
		} 
   	}
	Goto work 
  
}

/*
 * Execute the command boundary to move along the room bundary
 * by removing the obstacles
 */
QActor walker context ctxSmartRobot{
["var NumOfRotations = 0 "]
	State s0 initial{
	}
 	Transition t0  whenEvent boundary -> walk
	
	State walk{
 		delay 1000   
		request smartrobot -m  onestep :  onestep(380)   
	} 
	Transition t0 
		whenReply stepdone -> walk
		whenReply stepfail -> rotate
 	
 	
// 	State stepCompleted{}
// 	State stepFailed{}
	State rotate{
		println("WALKER | ==================================== rotate ")
		["NumOfRotations++"]
		forward smartrobot -m cmd : cmd(l)
		delay 500
	}
	Goto s0 if "(NumOfRotations==4)" else walk
	
	
}
 	
 

 
